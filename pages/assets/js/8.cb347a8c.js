(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{354:function(e,t,a){"use strict";a.r(t);var r=a(42),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),a("p",[e._v("Mosx is state management framework based on "),a("a",{attrs:{href:"https://mobx.js.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("MobX"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),a("p",[e._v("MosX provides to you:")]),e._v(" "),a("ul",[a("li",[e._v("Observable state with concept of a living tree")]),e._v(" "),a("li",[e._v("Multiple views of the same state (public and private views)")]),e._v(" "),a("li",[e._v("Runtime views configuration")]),e._v(" "),a("li",[e._v("Patch ("),a("a",{attrs:{href:"http://jsonpatch.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JsonPatch"),a("OutboundLink")],1),e._v(" format) and snapshot generation for each view")]),e._v(" "),a("li",[e._v("Custom schema generation and serialization support")]),e._v(" "),a("li",[e._v("Typescript syntax support out of the box")]),e._v(" "),a("li",[e._v("Works perfect with "),a("a",{attrs:{href:"https://github.com/udamir/magx",target:"_blank",rel:"noopener noreferrer"}},[e._v("MagX"),a("OutboundLink")],1),e._v(" server")])]),e._v(" "),a("h2",{attrs:{id:"concept"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concept"}},[e._v("#")]),e._v(" Concept")]),e._v(" "),a("p",[e._v("Central in mosx is the concept of a state tree. The state tree consists of mutable objects, arrays and maps. Every object and property of state tree can be public or private. Public objects/properies can be tracing by all listeners, but private are avalible only for listeners with access. So this means that every listener can have their own view of the same state tree. Access to private object/properties can be updated in real-time.")]),e._v(" "),a("p",[e._v("On each mutation of state automatically generate patch for all listeners in ("),a("a",{attrs:{href:"http://jsonpatch.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JsonPatch"),a("OutboundLink")],1),e._v(" format. Patch can be encoded via embeded serializer, or with custom serializer implementation. Snapshot of state tree is also avalible for every listener.")]),e._v(" "),a("p",[e._v("Since mosx uses MobX behind the scenes, computed properties are supported OOB. Observable properties are also supported, but hidden for listeners and can be used in computed properties.")]),e._v(" "),a("p",[e._v("Another core design goal of mosx is to offer a easy and clean way to create multiview state with great Typescript decorators syntax. Everything you need to make your state trackable, just wrap your class and proreties with "),a("code",[e._v("@mx")]),e._v(" decorator.")]),e._v(" "),a("h2",{attrs:{id:"requirements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requirements"}},[e._v("#")]),e._v(" Requirements")]),e._v(" "),a("p",[e._v("This library requires a more or less modern Javascript environment to work, namely one with support for:")]),e._v(" "),a("ul",[a("li",[e._v("MobX 5")]),e._v(" "),a("li",[e._v("Proxies")]),e._v(" "),a("li",[e._v("Symbols")]),e._v(" "),a("li",[e._v("WeakMap/WeakSet")])]),e._v(" "),a("p",[e._v("If you are using Typescript, then version >= 3.7.3 is recommended, though it might work with older versions.")]),e._v(" "),a("h2",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install --save mosx\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);